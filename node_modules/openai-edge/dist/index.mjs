const BASE_PATH = "https://api.openai.com/v1".replace(/\/+$/, "");
class Configuration {
    /**
     * parameter for apiKey security
     * @param name security name
     * @memberof Configuration
     */
    apiKey;
    /**
     * OpenAI organization id
     *
     * @type {string}
     * @memberof Configuration
     */
    organization;
    /**
     * parameter for basic security
     *
     * @type {string}
     * @memberof Configuration
     */
    username;
    /**
     * parameter for basic security
     *
     * @type {string}
     * @memberof Configuration
     */
    password;
    /**
     * parameter for oauth2 security
     * @param name security name
     * @param scopes oauth2 scope
     * @memberof Configuration
     */
    accessToken;
    /**
     * override base path
     *
     * @type {string}
     * @memberof Configuration
     */
    basePath;
    /**
     * base options for axios calls
     *
     * @type {any}
     * @memberof Configuration
     */
    baseOptions;
    /**
     * The FormData constructor that will be used to create multipart form data
     * requests. You can inject this here so that execution environments that
     * do not support the FormData class can still run the generated client.
     *
     * @type {new () => FormData}
     */
    formDataCtor;
    // asdlfkalsdfkmad
    constructor(param = {}) {
        this.apiKey = param.apiKey;
        this.organization = param.organization;
        this.username = param.username;
        this.password = param.password;
        this.accessToken = param.accessToken;
        this.basePath = param.basePath;
        this.baseOptions = param.baseOptions;
        this.formDataCtor = param.formDataCtor;
        if (!this.baseOptions) {
            this.baseOptions = {};
        }
        this.baseOptions.headers = Object.assign({
            // "User-Agent": `OpenAI/NodeJS/${packageJson.version}`,
            Authorization: `Bearer ${this.apiKey}`,
        }, this.baseOptions.headers);
        if (this.organization) {
            this.baseOptions.headers["OpenAI-Organization"] = this.organization;
        }
        // if (!this.formDataCtor) {
        //   this.formDataCtor = require("form-data")
        // }
    }
    /**
     * Check if the given MIME is a JSON MIME.
     * JSON MIME examples:
     *   application/json
     *   application/json; charset=UTF8
     *   APPLICATION/JSON
     *   application/vnd.company+json
     * @param mime - MIME (Multipurpose Internet Mail Extensions)
     * @return True if the given MIME is JSON, false otherwise.
     */
    isJsonMime(mime) {
        const jsonMime = new RegExp("^(application/json|[^;/ \t]+/[^;/ \t]+[+]json)[ \t]*(;.*)?$", "i");
        return (mime !== null &&
            (jsonMime.test(mime) ||
                mime.toLowerCase() === "application/json-patch+json"));
    }
}
/**
 *
 * @export
 * @class BaseAPI
 */
class BaseAPI {
    basePath;
    configuration;
    constructor(configuration, basePath = BASE_PATH) {
        this.basePath = basePath;
        // this.axios = axios;
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
}
/**
 * OpenAIApi - object-oriented interface
 * @export
 * @class OpenAIApi
 * @extends {BaseAPI}
 */
class OpenAIApi extends BaseAPI {
    /**
     *
     * @summary Creates a completion for the chat message
     * @param {CreateChatCompletionRequest} createChatCompletionRequest
     * @throws {RequiredError}
     * @memberof OpenAIApi
     */
    createChatCompletion(createChatCompletionRequest
    // options?: AxiosRequestConfig
    ) {
        if (!this.configuration) {
            throw new Error(`Must provide a valid configuration to \`OpenAIApi\``);
        }
        return fetch("https://api.openai.com/v1/chat/completions", {
            method: "POST",
            headers: {
                ...this.configuration.baseOptions.headers,
                "Content-Type": "application/json",
            },
            body: JSON.stringify(createChatCompletionRequest),
        });
    }
    /**
     *
     * @summary Creates a completion for the provided prompt and parameters
     * @param {CreateCompletionRequest} createCompletionRequest
     * @throws {RequiredError}
     * @memberof OpenAIApi
     */
    createCompletion(createCompletionRequest
    // options?: AxiosRequestConfig
    ) {
        if (!this.configuration) {
            throw new Error(`Must provide a valid configuration to \`OpenAIApi\``);
        }
        return fetch("https://api.openai.com/v1/completions", {
            method: "POST",
            headers: {
                ...this.configuration.baseOptions.headers,
                "Content-Type": "application/json",
            },
            body: JSON.stringify(createCompletionRequest),
        });
    }
    /**
     *
     * @summary Creates an image given a prompt.
     * @param {CreateImageRequest} createImageRequest
     * @throws {RequiredError}
     * @memberof OpenAIApi
     */
    createImage(createImageRequest
    // options?: AxiosRequestConfig
    ) {
        if (!this.configuration) {
            throw new Error(`Must provide a valid configuration to \`OpenAIApi\``);
        }
        return fetch("https://api.openai.com/v1/images/generations", {
            method: "POST",
            headers: {
                ...this.configuration.baseOptions.headers,
                "Content-Type": "application/json",
            },
            body: JSON.stringify(createImageRequest),
        });
    }
}

export { Configuration, OpenAIApi };
